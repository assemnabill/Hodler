@rendermode InteractiveServer
@using Hodler.Contracts.Portfolio.PortfolioSummary
@using Transaction = Hodler.Web.Components.Pages.Transactions.TransactionViewModel

<div class="container">
    <MatTable Items="_sortedData" ShowPaging="false" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="date">Date</MatSortHeader>
                <MatSortHeader SortId="type">Type</MatSortHeader>
                <MatSortHeader SortId="amount">Amount</MatSortHeader>
                <MatSortHeader SortId="price">Price</MatSortHeader>
                <MatSortHeader SortId="total">Total</MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>

        <MatTableRow>
            <td>@context.Timestamp.ToString()</td>
            <td>@context.Type</td>
            <td>@context.BtcAmount BTC</td>
            <td>€@context.FiatAmount</td>
            <td>€@context.MarketPrice</td>
        </MatTableRow>

    </MatTable >
</div>

@code {
    List<TransactionInfoDto> _sortedData = [];
    [Parameter] public IReadOnlyCollection<TransactionInfoDto> Transactions { get; set; } = [];

    void SortData(MatSortChangedEvent sort)
    {

        if (sort is null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId))
            return;

        _sortedData = Transactions?.ToList();
        Comparison<Transaction>? comparison = sort.SortId switch
        {
            "date" => (s1, s2) => s1.Date.CompareTo(s2.Date),
            "type" => (s1, s2) => string.Compare(s1.Type, s2.Type, StringComparison.InvariantCultureIgnoreCase),
            "amount" => (s1, s2) => s1.Amount.CompareTo(s2.Amount),
            "price" => (s1, s2) => s1.Price.CompareTo(s2.Price),
            "total" => (s1, s2) => s1.Total.CompareTo(s2.Total),
            _ => null
        };

        if (comparison != null)
        {
            // Array.Sort(
            //     _sortedData,
            //     sort.Direction == MatSortDirection.Desc
            //         ? (s1, s2) => -1 * comparison(s1, s2)
            //         : comparison
            // );
            _sortedData.Sort(
                (Comparison<TransactionInfoDto>)(sort.Direction == MatSortDirection.Desc
                    ? (s1, s2) => -1 * comparison(s1, s2)
                    : comparison)
            );
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SortData(null);
    }

}