@page "/transactions"
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using Hodler.Contracts.Portfolio.PortfolioSummary
@using Hodler.Contracts.Shared
@rendermode InteractiveServer
@using Transaction = Hodler.Web.Components.Pages.Transactions.TransactionViewModel
@inject HodlerApiClient HodlerApi

<PageTitle>Transactions</PageTitle>

<div class="container">
    <MatHeadline2 Style="padding: 10px">Transactions</MatHeadline2>

    <div class="action-buttons">
        @* todo *@
        @* <MatTooltip Tooltip="Add a transaction manually" Position="@MatTooltipPosition.Top"> *@
        @*     <MatButton Outlined="true" RefBack="@context" Icon="@MatIconNames.Add" OnClick="OpenAddTransactionModal">Add Transaction</MatButton> *@
        @* </MatTooltip> *@
        @* <MatTooltip Tooltip="Import transactions automatically by syncing with Exchange" Position="@MatTooltipPosition.Top"> *@
        @*     <MatButton Outlined="true" RefBack="@context" Icon="@MatIconNames.Sync" OnClick="OpenSyncDialog">Import Transaction</MatButton> *@
        @* </MatTooltip> *@
        <RadzenStack Orientation="Orientation.Horizontal"
                     AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center"
                     Gap="0.5rem" class="rz-p-12">
            <RadzenLabel Text="Import Transaction" Component="DropDownDataGridChangeEvent"/>
            <RadzenDropDownDataGrid TValue="CryptoExchange"
                                    Data=@_cryptoExchangeNames
                                    Change="@(OnCryptoExchangeSelected)"
                                    Name="DropDownDataGridChangeEvent"/>
        </RadzenStack>
    </div>

    @if (_transactions is { Count: > 0 })
    {
        <RadzenDataGrid @ref="transactionGrid"
                        Data="@_transactions"
                        TItem="TransactionInfoDto"
                        AllowPaging="true"
                        PageSize="10"
                        AllowSorting="true"
                        ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="TransactionInfoDto" Property="Type" Title="Transaction Type" Width="150px"/>
                <RadzenDataGridColumn TItem="TransactionInfoDto" Property="FiatAmount" Title="Fiat Amount" Width="150px"/>
                <RadzenDataGridColumn TItem="TransactionInfoDto" Property="BtcAmount" Title="BTC Amount" Width="150px"/>
                <RadzenDataGridColumn TItem="TransactionInfoDto" Property="MarketPrice" Title="Market Price" Width="150px"/>
                <RadzenDataGridColumn TItem="TransactionInfoDto" Property="Timestamp" Title="Timestamp" FormatString="{0:MM/dd/yyyy hh:mm tt}" Width="200px"/>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    private IReadOnlyCollection<TransactionInfoDto> _transactions;
    private RadzenDataGrid<TransactionInfoDto> transactionGrid;
    private Transaction _newTransaction = new();

    // CryptoExchange _value;
    IEnumerable _cryptoExchangeNames;
    CryptoExchange _value;

    const string userId = "a315dad9-a26f-4047-b1c0-0133efe30d6f";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _cryptoExchangeNames = Enum.GetValues(typeof(CryptoExchange));
        var portfolioInfoDto = await HodlerApi.GetPortfolioInfoAsync(userId);
        _transactions = portfolioInfoDto?.Transactions ?? [];
    }

    private async void OnCryptoExchangeSelected(object args)
    {
        Console.Write(args);

        _value = Enum.GetValues(typeof(CryptoExchange))
            .Cast<CryptoExchange>()
            .FirstOrDefault(x => x.ToString() == args.ToString());

        var portfolioInfoDto = await HodlerApi.SyncWithExchangeAsync(_value, userId);

        if (portfolioInfoDto?.Transactions != null)
            _transactions = portfolioInfoDto.Transactions;

        StateHasChanged();
    }

    private void AddTransaction()
    {
        if (ValidateTransaction())
        {
            _newTransaction.Total = _newTransaction.Amount * _newTransaction.Price;
            // _transactions.Add(_newTransaction);
        }
    }

    private bool ValidateTransaction()
    {
        var results = new List<ValidationResult>();
        var context = new ValidationContext(_newTransaction);
        if (!Validator.TryValidateObject(_newTransaction, context, results, true))
        {
            foreach (var error in results)
            {
                Console.WriteLine(error.ErrorMessage);
            }

            return false;
        }

        return true;
    }

}

<style>
    .action-buttons  {
        display: flex;
        justify-content: end;
    }
    .action-buttons button {
        margin-left: 10px;
        justify-items: end;
    }
    
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }
</style>