@page "/"
@layout MainLayout
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@using System.Globalization
@using Hodler.Contracts.Portfolio.PortfolioSummary
@using Hodler.Web.Components.Layout
@using Hodler.Web.Services.Portfolio
@using Hodler.Web.Components.Shared.Components
@inject IPortfolioServiceViewService PortfolioServiceViewService
@implements IDisposable

<PageTitle>Dashboard</PageTitle>

@if (IsLoading)
{
    <LoadingComponent></LoadingComponent>
}
else
{
    <div class="padding-window">
        <div class="container">
            <div style="font-size: 30px;">
                <b>Hello, Hodler!</b>
            </div>
            <br/>
            <p style="font-weight: lighter; font-size: 25px; margin: 0px;">Portfolio Value</p>

            @{
                var portfolioValue = PortfolioServiceViewService.PortfolioSummary?.PortfolioValue?.Amount
                    .ToString("C", CultureInfo.CurrentCulture);
            }
            <p style="font-size: 50px;">
                <span class="@_cssClass">@portfolioValue</span>
            </p>
            <PortifolioValueChartComponent></PortifolioValueChartComponent>
        </div>
        <PortifolioMetricsComponent PortfolioSummary="PortfolioServiceViewService.PortfolioSummary"></PortifolioMetricsComponent>
    </div>
}

@code
{
    [Inject] private IPortfolioServiceViewService ViewService { get; set; }

    private string _cssClass = string.Empty;
    private PortfolioSummaryDto _summary;
    private bool IsLoading => ViewService.PortfolioSummary is null;

    protected override async Task OnInitializedAsync()
    {
        await ViewService.InitPortfolioSummaryAsync();

        if (ViewService.PortfolioSummary != null)
        {
            _summary = ViewService.PortfolioSummary;
        }

        ViewService.PortfolioSummaryChanged += OnPortfolioSummaryChanged;

        await base.OnInitializedAsync();
    }

    private void OnPortfolioSummaryChanged(object? sender, EventArgs e)
    {
        if (sender is null)
            return;

        var summary = (PortfolioSummaryDto)sender;
        var newPrice = summary.CurrentBitcoinPrice.Amount;
        var oldPrice = _summary.CurrentBitcoinPrice.Amount;

        if (newPrice == oldPrice)
            return;

        var increased = newPrice > oldPrice;
        FlashPriceChange(increased);
        _summary = summary;
        InvokeAsync(StateHasChanged);
    }

    private void FlashPriceChange(bool increased)
    {
        _cssClass = increased ? "flash-green" : "flash-red";

        // Remove the class after the animation duration (1 second) to reset it for future flashes
        var classLifeTimeInSeconds = 2;
        Task.Delay(classLifeTimeInSeconds * 1000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                _cssClass = string.Empty;
                StateHasChanged();
            });
        });
    }

    public void Dispose()
        => ViewService.PortfolioSummaryChanged -= OnPortfolioSummaryChanged;
}