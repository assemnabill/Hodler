@using System.Globalization
@using Hodler.Contracts.Portfolio
@using TransactionViewModel = Hodler.Web.TransactionViewModel
@inject HodlerApiClient HodlerApi

<RadzenStack Gap="0" class="rz-p-0 rz-p-md-6 rz-p-lg-12">
    <div style="font-size: 30px;">
        <b>Hello, Hodler!</b>
    </div>
    <br/>
    <RadzenLabel Style="font-weight: lighter; font-size: 20px;" Text="Portfolio Value"></RadzenLabel>
    <RadzenText Style="font-size: 35px;" Text="@_portfolioOverallValue.ToString("C", CultureInfo.CurrentCulture)"></RadzenText>
    <RadzenChart TooltipTolerance="100">
        <RadzenChartTooltipOptions Shared="@_sharedTooltip"/>
        <RadzenAreaSeries Smooth="@_smooth"
                          Data="@_portfolioPositions"
                          Title="Portfolio Value"
                          CategoryProperty="Date"
                          ValueProperty="Revenue">
            <RadzenMarkers Visible="@_showMarkers" MarkerType="MarkerType.Circle"/>
            <RadzenSeriesDataLabels Visible="@_showDataLabels"/>
            <RadzenLegend Visible="@_showLegend"></RadzenLegend>
        </RadzenAreaSeries>
        <RadzenValueAxis Visible="false"></RadzenValueAxis>
        <RadzenCategoryAxis Visible="false" Padding="20"/>
    </RadzenChart>
</RadzenStack>

@code {
    private TransactionViewModel[]? _transactions;
    private bool _smooth = true;
    private bool _sharedTooltip = false;
    private bool _showDataLabels = false;
    private bool _showMarkers = false;
    private bool _showLegend = false;
    private double _portfolioOverallValue = 0.0;
    DataItem[] _portfolioPositions = [];

    protected override async Task OnInitializedAsync()
    {
        _transactions = (await HodlerApi.GetTransactionsAsync()!)?
            .OrderBy(t => t.Timestamp)
            .ToArray();

        _portfolioPositions = _transactions?
            .Select(t => new DataItem
            {
                Date = t.Timestamp.ToString("R"),
                Revenue = GetPortfolioValue(t)
            })
            .ToArray()!;
    }

    private double GetPortfolioValue(TransactionViewModel transaction)
    {
        var transactions = _transactions
            .TakeWhile(t => t.Timestamp <= transaction.Timestamp)
            .ToArray();

        var bought = transactions
            .Where(t => t.Type == TransactionType.Buy)
            .Sum(t => t.BtcAmount);

        var sold = transactions
            .Where(t => t.Type == TransactionType.Sell)
            .Sum(t => t.BtcAmount);

        var positionValue = (bought - sold) * transaction.MarketPrice;

        _portfolioOverallValue = positionValue;

        return _portfolioOverallValue;
    }

    record DataItem
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

}

<style>
    .rz-scheme-pastel .rz-series-0 {
        fill: #26b050;
        stroke: #26b050
    }
</style>